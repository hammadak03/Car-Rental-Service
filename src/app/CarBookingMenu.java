/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package app;

import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Connection;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dell
 */
public class CarBookingMenu extends javax.swing.JFrame {

    /**
     * Creates new form Book_A_Car
     */
    public CarBookingMenu() {
        initComponents();
    }

    String VehicleType;
    
    Connection con;
    
    private void Connection() {
        String url = "jdbc:mysql://localhost:3306/car_rentaldb"; //database URL
        String user = "root"; //root name
        String password = "261003"; //password
        try {
            con = DriverManager.getConnection(url, user, password);
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    public void showVehicles(String VehicleType) {
        Connection();
        String sql = "SELECT Name, Year, DailyPrice, PlateNo FROM vehicle WHERE Available = 'yes' AND Type = ?";
        try {
            PreparedStatement ps = con.prepareCall(sql);
            ps.setString(1, VehicleType);
            ResultSet rs = ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel) tblBook.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                model.addRow(new String[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4)});
            }
            con.close();
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu1 = new java.awt.PopupMenu();
        jRadioButton1 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cboType = new javax.swing.JComboBox<>();
        btnSubmit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBook = new javax.swing.JTable();
        dtcPickup = new com.toedter.calendar.JDateChooser();
        dtcReturn = new com.toedter.calendar.JDateChooser();
        rdoDriver = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        Policybtn = new javax.swing.JButton();

        popupMenu1.setLabel("popupMenu1");

        jRadioButton1.setText("jRadioButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Book A Car");

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel2.setText("Pickup Date:");

        jLabel3.setText("Return Date:");

        jLabel4.setText("Select the Type: ");

        cboType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sedan", "Minivan", "Compact" }));
        cboType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTypeActionPerformed(evt);
            }
        });

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        tblBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Year", "Rent/Day", "No. Plate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblBook);

        rdoDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoDriverActionPerformed(evt);
            }
        });

        jLabel5.setText("Do you want a driver?");

        Policybtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/app/Policies.jpg"))); // NOI18N
        Policybtn.setBorder(null);
        Policybtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PolicybtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(134, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboType, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(149, 149, 149))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 169, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(154, 154, 154)
                        .addComponent(Policybtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(btnBack)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(79, 79, 79)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rdoDriver))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(dtcPickup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dtcReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSubmit)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addComponent(Policybtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBack)
                            .addComponent(btnSubmit))
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(dtcPickup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dtcReturn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdoDriver)
                            .addComponent(jLabel5)))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        new CustomerMenu().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    public boolean checkDriverAvailability() {
        Connection();
        String sql = "SELECT COUNT(*) AS count FROM employee WHERE Job = 'Driver' AND Availability = 'Yes'";
        try {
            PreparedStatement ps = con.prepareCall(sql);
            ResultSet rs = ps.executeQuery();
            int count = 0;
            if (rs.next()) {
                count = rs.getInt("count");
            }
            //con.close();
            return count > 0;
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
            return false;
        }
    }


    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // Get the pickup and return dates
        Date pickupDate = dtcPickup.getDate();
        Date returnDate = dtcReturn.getDate();
        long differenceInMilliseconds = returnDate.getTime() - pickupDate.getTime();
        int dateDifference = (int) (differenceInMilliseconds / (1000 * 60 * 60 * 24));
        if (dateDifference == 0) {
            dateDifference = 1;
        }
        // Check if pickup and return dates are selected
        if (pickupDate == null || returnDate == null) {
            JOptionPane.showMessageDialog(this, "Please select pickup and return dates.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if return date is before pickup date
        if (returnDate.before(pickupDate)) {
            JOptionPane.showMessageDialog(this, "Return date cannot be before pickup date.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get the selected row index
        int selectedRow = tblBook.getSelectedRow();
        if (selectedRow == -1) {
            // No row is selected, display an error message
            JOptionPane.showMessageDialog(this, "Please select a car to book.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Extract the relevant information from the selected row
        String plateNo = tblBook.getValueAt(selectedRow, 3).toString();
        boolean hireDriver = rdoDriver.isSelected();
        //Getting dailyPrice in local a variable
        int dailyPrice = 0;
        try {
            Connection();
            String getDailyPriceQuery = "SELECT DailyPrice FROM Vehicle WHERE PlateNo = ?";
            PreparedStatement getDailyPriceStatement = con.prepareStatement(getDailyPriceQuery);
            getDailyPriceStatement.setString(1, plateNo);
            ResultSet priceResultSet = getDailyPriceStatement.executeQuery();
            if (priceResultSet.next()) {
                dailyPrice = priceResultSet.getInt("DailyPrice");
            }
            con.close();
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
        //setting up initial bill without dirver fee, will update it if user wants driver and there is availability of driver.
        int initialBill = dateDifference * dailyPrice;
        // Display a confirmation dialog with necessary information
        int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to book the car with PlateNo: " + plateNo
                + "\nFrom: " + pickupDate + "\nTo: " + returnDate + "\nCharges: Rs." + initialBill + "(+Driver Charges if any)",
                "Confirmation", JOptionPane.YES_NO_OPTION);
        // Check user's response
        if (option == JOptionPane.YES_OPTION) {
            // User confirmed the booking, proceed with inserting data into the rental table
            try {
                Connection();
                boolean driverAvailable = checkDriverAvailability();
                int driverID = -1;
                if (hireDriver && !driverAvailable) {
                    int proceedWithoutDriver = JOptionPane.showConfirmDialog(this, "Sorry, no available drivers at the moment. Do you want to proceed without a Driver?", "Driver Unavailable", JOptionPane.YES_NO_OPTION);
                    if (proceedWithoutDriver == JOptionPane.YES_OPTION) {
                        hireDriver = false;
                        //no change in initial bill as there will be no driver's fee
                    } else {
                        JOptionPane.showMessageDialog(this, "Booking canceled.", "Canceled", JOptionPane.INFORMATION_MESSAGE);
                        return;
                    }
                } else if (hireDriver && driverAvailable) {
                    //adding driver fee to initial bill, let driver fee be 1000rs per day.
                    initialBill = (dateDifference * dailyPrice) + (dateDifference * 1000);
                    // Select an available driver ID
                    String selectDriverQuery = "SELECT EmpID FROM employee WHERE Job = 'Driver' AND Availability = 'Yes' LIMIT 1";
                    PreparedStatement selectDriverStatement = con.prepareStatement(selectDriverQuery);
                    ResultSet driverResultSet = selectDriverStatement.executeQuery();
                    // Check if a driver is available
                    if (driverResultSet.next()) {
                        driverID = driverResultSet.getInt("EmpID");
                        // Update the driver's availability
                        String updateDriverQuery = "UPDATE employee SET Availability = 'No' WHERE EmpID = ?";
                        PreparedStatement updateDriverStatement = con.prepareStatement(updateDriverQuery);
                        updateDriverStatement.setInt(1, driverID);
                        updateDriverStatement.executeUpdate();
                    }
                }
                // Insert rental data into the database
                String insertRentalQuery = "INSERT INTO rentals (VehicleID, CstID, PickupDate,"
                        + " DropoffDate, DriverID, InitialPrice) VALUES ("
                        + "(SELECT VehicleID FROM vehicle WHERE PlateNo = ?), ?, ?, ?, ?, ?)";
                PreparedStatement insertRentalStatement = con.prepareStatement(insertRentalQuery);
                insertRentalStatement.setString(1, plateNo);
                insertRentalStatement.setInt(2, CustomerSession.getCustomerId());
                insertRentalStatement.setDate(3, new java.sql.Date(pickupDate.getTime()));
                insertRentalStatement.setDate(4, new java.sql.Date(returnDate.getTime()));
                if (driverID == -1) {
                    insertRentalStatement.setNull(5, java.sql.Types.INTEGER);
                } else {
                    insertRentalStatement.setInt(5, driverID);
                }
                insertRentalStatement.setInt(6, initialBill);
                insertRentalStatement.executeUpdate();
                // Update the vehicle availability to 'No'
                String updateVehicleAvailabilityQuery = "UPDATE vehicle SET Available = 'No' WHERE PlateNo = ?";
                PreparedStatement updateVehicleAvailabilityStatement = con.prepareStatement(updateVehicleAvailabilityQuery);
                updateVehicleAvailabilityStatement.setString(1, plateNo);
                updateVehicleAvailabilityStatement.executeUpdate();

                con.close();
                // Display success message
                JOptionPane.showMessageDialog(this, "Car booked successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                showVehicles(VehicleType);
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
                JOptionPane.showMessageDialog(this, "An error occurred while booking the car.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // User canceled the booking
            JOptionPane.showMessageDialog(this, "Booking canceled.", "Canceled", JOptionPane.INFORMATION_MESSAGE);
        }


    }//GEN-LAST:event_btnSubmitActionPerformed

    private void cboTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTypeActionPerformed
        // TODO add your handling code here:
        VehicleType = cboType.getSelectedItem().toString();
        showVehicles(VehicleType);
    }//GEN-LAST:event_cboTypeActionPerformed

    private void rdoDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoDriverActionPerformed
        // TODO add your handling code here:
        if (rdoDriver.isSelected()) {
            JOptionPane.showMessageDialog(this, "Charges will be applied");
        }
    }//GEN-LAST:event_rdoDriverActionPerformed

    private void PolicybtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PolicybtnActionPerformed
        
        String policies = "Thank you for choosing our car rental service! Here are our rental policies:\n\n"
                        + "1. Daily  driver charges are Rs.1000 per day.\n"
                        + "2. There is no refund for returning the vehicle before the scheduled return date.\n"
                        + "3. A penalty of Rs.2000 per day will be charged for late returns.\n"
                        + "4. The vehicle must be returned in the same condition it was rented in.\n"
                        + "5. Smoking and pets are not allowed in the vehicles.\n"
                        + "6. The rental agreement is subject to the terms and conditions outlined in our contract.";

        JOptionPane.showMessageDialog(null, policies, "Rental Policies", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_PolicybtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CarBookingMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CarBookingMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CarBookingMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CarBookingMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CarBookingMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Policybtn;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox<String> cboType;
    private com.toedter.calendar.JDateChooser dtcPickup;
    private com.toedter.calendar.JDateChooser dtcReturn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.PopupMenu popupMenu1;
    private javax.swing.JRadioButton rdoDriver;
    private javax.swing.JTable tblBook;
    // End of variables declaration//GEN-END:variables
}
