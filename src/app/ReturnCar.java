/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package app;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.Date;

/**
 *
 * @author Dell
 */
public class ReturnCar extends javax.swing.JFrame {

    /**
     * Creates new form Return
     */
    public ReturnCar() {
        initComponents();
    }

    Connection con;

    private void Connection() {
        String url = "jdbc:mysql://localhost:3306/car_rentaldb";
        String user = "root";
        String password = "261003";
        try {
            con = DriverManager.getConnection(url, user, password);
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    public void showVehicles() {
        int customerId = CustomerSession.getCustomerId();
        Connection();
        String sql = """
                     SELECT v.Name, v.Year, v.Type, v.PlateNo FROM vehicle v
                     JOIN rentals r ON v.VehicleID = r.VehicleID
                     WHERE r.CstID = ? AND Status = 'Rented';""";

        try {
            PreparedStatement ps = con.prepareCall(sql);
            ps.setInt(1, customerId);
            ResultSet rs = ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel) tblReturn.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                model.addRow(new String[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4)});
            }
            con.close();
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblReturn = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Your Rented Cars");

        tblReturn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Years", "Type", "Plate No:"
            }
        ));
        jScrollPane1.setViewportView(tblReturn);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnReturn.setText("Return Selected");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(68, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnReturn)
                .addGap(118, 118, 118))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnReturn))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        new CustomerMenu().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed

        // Get the selected row index
        int selectedRow = tblReturn.getSelectedRow();
        if (selectedRow == -1) {
            // No row is selected, display an error message
            JOptionPane.showMessageDialog(this, "Please select a car to return.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Extract the relevant information from the selected row
        String plateNo = tblReturn.getValueAt(selectedRow, 3).toString();
        // int customerId = CustomerSession.getCustomerId();
        int dailyPrice = 0;

        try {
            Connection();
            String getDailyPriceQuery = "SELECT DailyPrice FROM Vehicle WHERE PlateNo = ?";
            PreparedStatement getDailyPriceStatement = con.prepareStatement(getDailyPriceQuery);
            getDailyPriceStatement.setString(1, plateNo);
            ResultSet priceResultSet = getDailyPriceStatement.executeQuery();
            if (priceResultSet.next()) {
                dailyPrice = priceResultSet.getInt("DailyPrice");
            }
            //con.close();
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }

        try {

            String retrieveQuery = "SELECT DropoffDate, InitialPrice FROM rentals WHERE VehicleID = (SELECT VehicleID FROM vehicle WHERE PlateNo = ?)AND Status =  'Rented'";
            PreparedStatement retrieveStatement = con.prepareStatement(retrieveQuery);
            retrieveStatement.setString(1, plateNo);
            ResultSet DataResultSet = retrieveStatement.executeQuery();
            if (DataResultSet.next()) {
                Date dropOffDate = DataResultSet.getDate("DropoffDate");
                int InitialPrice = DataResultSet.getInt("InitialPrice");
                Date today = new java.util.Date();

                // Calculate the difference in days between drop-off date and today's date
                long differenceInMilliseconds = today.getTime() - dropOffDate.getTime();
                int dateDifference = (int) (differenceInMilliseconds / (1000 * 60 * 60 * 24));

                int penaltyPerDay = 2000; // Example: Penalty amount per day
                int penalty = 0;
                int FinalPrice = InitialPrice;

                if (dateDifference < 0) {
                    JOptionPane.showMessageDialog(this, "The vehicle is being returned early.\n No refund according to the policy.", "Early Return", JOptionPane.INFORMATION_MESSAGE);
                } else if (dateDifference == 0) {
                    JOptionPane.showMessageDialog(this, "The vehicle is being returned on time.", "On Time Return", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "The vehicle is being returned late.\n Penalty charged according to the policy.", "Late Return", JOptionPane.INFORMATION_MESSAGE);
                    int excessDailyPrice = dateDifference * dailyPrice;
                    penalty = (int) (dateDifference * penaltyPerDay);
                    FinalPrice = excessDailyPrice + penalty;
                }

                // Update the rental table to mark the rental as completed and add the penalty
                String updateRentalQuery = "UPDATE rentals SET Penalty = ?, FinalPrice = ? "
                        + "WHERE VehicleID = (SELECT VehicleID FROM vehicle WHERE PlateNo = ?) "
                        + "AND Status = 'Rented'";
                PreparedStatement updateRentalStatement = con.prepareStatement(updateRentalQuery);
                updateRentalStatement.setInt(1, penalty);
                updateRentalStatement.setInt(2, FinalPrice);
                updateRentalStatement.setString(3, plateNo);
                updateRentalStatement.executeUpdate();
            }
        } catch (Exception e) {
            System.out.println("Error updating rental status or calculating penalty: " + e.getMessage());
        }

        //Generate Bill
        String cstName = null;
        String vName = null;
        String type = null;
        Date pickupDate = null;
        Date dropOffDate = null;
        int initialPrice = 0;
        int penalty = 0;
        int finalPrice = 0;
        try {
            Connection();
            //Generate Bill
            String sql = "SELECT c.cstName, v.Name, v.Type, r.pickupDate, r.dropOffDate, r.initialPrice, r.Penalty, r.finalPrice"
                    + " FROM rentals r JOIN vehicle v ON r.vehicleID = v.vehicleID "
                    + "JOIN customer c ON r.cstID = c.cstID "
                    + "WHERE v.PlateNo = ? AND r.status = 'Rented';";
            PreparedStatement getBillingData = con.prepareStatement(sql);
            getBillingData.setString(1, plateNo);
            ResultSet resultSet = getBillingData.executeQuery();
            while (resultSet.next()) {
                cstName = resultSet.getString("cstName");
                vName = resultSet.getString("Name");
                type = resultSet.getString("Type");
                pickupDate = resultSet.getDate("pickupDate");
                dropOffDate = resultSet.getDate("dropOffDate");
                initialPrice = resultSet.getInt("initialPrice");
                penalty = resultSet.getInt("Penalty");
                finalPrice = resultSet.getInt("finalPrice");
            }

        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
        Bill bill = new Bill();
        bill.setVisible(true);
        bill.generateBill(cstName, vName, plateNo, type, pickupDate, dropOffDate, initialPrice, penalty, finalPrice);

        // Update the vehicle table to mark the returned vehicle as available
        try {
            Connection();
            String updateVehicleQuery = "UPDATE vehicle SET Available = 'yes' WHERE PlateNo = ?";
            PreparedStatement updateVehicleStatement = con.prepareStatement(updateVehicleQuery);
            updateVehicleStatement.setString(1, plateNo);
            updateVehicleStatement.executeUpdate();
        } catch (Exception e) {
            System.out.println("Error updating vehicle status: " + e.getMessage());
        }

        // Update the availability of the driver in the employee table
        try {
            String updateDriverAvailabilityQuery = "UPDATE employee SET Availability = 'Yes' WHERE EmpID = (SELECT DriverID FROM rentals WHERE VehicleID = (SELECT VehicleID FROM vehicle WHERE PlateNo = ?)AND Status = 'Rented')";
            PreparedStatement updateDriverAvailabilityStatement = con.prepareStatement(updateDriverAvailabilityQuery);
            updateDriverAvailabilityStatement.setString(1, plateNo);
            updateDriverAvailabilityStatement.executeUpdate();
        } catch (Exception e) {
            System.out.println("Error updating driver availability: " + e.getMessage());
        }

        // Update the rental table to mark the rental as completed
        try {
            String updateRentalQuery = "UPDATE rentals SET Status = 'Completed' "
                    + "WHERE VehicleID = (Select VehicleID from vehicle where PlateNo = ?) "
                    + "AND Status = 'Rented';";
            PreparedStatement updateRentalStatement = con.prepareStatement(updateRentalQuery);
            updateRentalStatement.setString(1, plateNo);
            updateRentalStatement.executeUpdate();
        } catch (Exception e) {
            System.out.println("Error updating rental status: " + e.getMessage());
        }

        // Display a success message
//    JOptionPane.showMessageDialog(this, "Car returned successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        // Refresh the table to reflect the changes
        showVehicles();

        // TODO add your handling code here:
    }//GEN-LAST:event_btnReturnActionPerformed

    private void tblOurCarsPropertyChange(java.beans.PropertyChangeEvent evt) {
        // TODO add your handling code here:
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReturnCar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReturnCar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReturnCar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReturnCar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReturnCar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnReturn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblReturn;
    // End of variables declaration//GEN-END:variables
}
